# -*- coding: utf-8 -*-
from osv import osv, fields
from datetime import datetime


class jmdsaleorder(osv.Model):
    _inherit = "sale.order"

    def create(self, cr, uid, vals, context=None):
        now = datetime.now()
        cur_month = now.strftime("%m")
        cur_year = now.strftime("%y")
        partner_id = vals.get('partner_id')
        partner_object = self.pool.get("res.partner")
        partner_ref = ""
        max_id = "01"
        for i in partner_object.browse(cr, uid, [partner_id]):
            partner_ref = i.referencia
        #Buscando la ultima cotización del mes
        for j in self.browse(cr, uid, self.search(cr, uid, [(1, "=", 1)])):
            if j.name[-4:-2] == cur_month:
                try:
                    intval = int(j.name[-2:])
                    intmax = int(max_id)
                    if intval >= intmax:
                        intmax = intval + 1
                        max_id = str(intmax)
                        if intmax < 10:
                            max_id = "0" + str(intmax)
                except ValueError:
                    print("Warning wrong quotation code ")
        if vals.get('name', '/') == '/':
            vals['name'] = partner_ref + "-" + cur_year + cur_month + \
            max_id or '/'
        return super(jmdsaleorder, self).create(cr, uid, vals, context=context)

    def addversion(self, cr, uid, ids, context=None):
        print("Im duplicating the sale order right now!!!")
        default = {}
        duplicatename = ""
        for i in self.browse(cr, uid, ids, context):
            duplicatename = i.name
        if duplicatename[-2:-1] == "V":
            versionno = int(duplicatename[-1:])
            versionno = versionno + 1
            duplicatename = duplicatename[:-2] + "V" + str(versionno)
        else:
            duplicatename = duplicatename + "V1"
        for i in self.browse(cr, uid, self.search(cr, uid,
            [('name', '=', duplicatename)]), context):
                duplicatename = duplicatename + (versionno + 1)
        print(("The duplicate name should be" + duplicatename))
        default.update({
            'date_order': fields.date.context_today(self, cr,
            uid, context=context),
            'state': 'draft',
            'invoice_ids': [],
            'date_confirm': False,
            'name': duplicatename,
        })
        self.copy(cr, uid, ids[0], default, context=None)

    def create_cuotas(self, cr, uid, ids, context=None):
        ret = {}
        obj_cuotas = self.pool.get("control_encuestas")
        for i in self.browse(cr, uid, ids, context):
            id_cuotas = obj_cuotas.create(cr, uid, {
                       'name': i.name,
                       'cotizacion_id': i.id
                })
            self.write(cr, uid, [i.id], {
                    'cuotas': id_cuotas
                })
        return ret

    def request_budget(self, cr, uid, ids, context=None):
        ret = {}
        presupuesto_obj = self.pool.get("ea.presupuesto")
        for i in self.browse(cr, uid, ids, context):
            id_pres = presupuesto_obj.create(cr, uid, {
                    'name': i.name,
                    'claveproyecto': i.nombre_corto
                })
            self.write(cr, uid, [i.id], {'budget': id_pres})
        return ret

    def get_id(self, cr, uid, ids, fieldname, args, context=None):
        ret = {}
        for i in self.browse(cr, uid, ids, context):
            ret[i.id] = i.id
        return ret
    _columns = {
            'tipo': fields.many2one("ea.tipoestudio", string="Tipo de Estudio",
            ondelete="set null"),
            'nombre_corto': fields.char(string="Nombre Corto",
            size=40, translate=True),
            'budget': fields.many2one("ea.presupuesto", string="Presupuesto",
            ondelete="set null"),
            'current_id': fields.function(get_id, strgin="Id", type="integer"),
            'metodologia': fields.text("Metodología"),
            'objetivo': fields.text("Objetivo"),
            'tipo_levantamiento': fields.char("Tipo de Levantamiento"),
            'aprobada': fields.boolean("Aprobada por Control"),
            'cuotas': fields.many2one("control_encuestas", string="Cuotas"),
            'obj_img1': fields.binary("Imagen 1"),
            'obj_img2': fields.binary("Imagen 2"),
            'obj_img3': fields.binary("Imagen 3"),
            'obj_img4': fields.binary("Imagen 4"),
            'obj_img5': fields.binary("Imagen 5"),
            'met_img1': fields.binary("Imagen 1"),
            'met_img2': fields.binary("Imagen 2"),
            'met_img3': fields.binary("Imagen 3"),
            'met_img4': fields.binary("Imagen 4"),
            'met_img5': fields.binary("Imagen 5"),
        }